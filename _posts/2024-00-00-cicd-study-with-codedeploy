---
title: "Github Actions, CodeDeploy로 AWS Lightsail에 CI/CD 구축하기(작성중)"
date: 2024-00-00T00:00:00+09:00
categories:
tags:
classes: wide
---

## 개요
현재 참여중인 사이드 프로젝트 **AXYZ** 에서, 개발환경의 CI/CD 자동화 파이프라인을 구축하는 일을 맡게 되었다.
이를 위해 스터디한 내용을 기록하고자 한다.

관련 코드는 모두 [https://github.com/BomLee427/cicd-study](https://github.com/BomLee427/cicd-study) 에서 볼 수 있다.

### 구성
![](https://velog.velcdn.com/images/bomlee427/post/44a4b4b4-3e50-4343-9197-587c99a59d73/image.png)

파이프라인 구성을 나타낸 다이어그램이다.
순서를 간단히 설명하면 아래와 같다.

1. Github 레포지토리에 커밋하여 Github Actions 워크플로우 트리거
2. 도커 이미지 빌드
3. 빌드된 이미지를 AWS ECR에 Push
4. AWS S3에 배포 스크립트 업로드
5. AWS CodeDeploy에 배포를 요청
6. AWS CodeDeploy가 AWS LightSail에 배포 과정을 진행
7. AWS LightSail 내부에서 도커 이미지 및 배포 스크립트를 Pull & Run


### 기술 선택 배경
CI/CD는 크게 세 단계로 나눌 수 있다. **소스, 빌드, 배포**다. 그리고 이 세 단계를 조율하는 **파이프라인**까지 더해지면 CI/CD 파이프라인이 완성된다. 각 부분마다 다양한 선택지가 있고 이는 프로젝트 상황에 맞추어 고르면 된다. 이번 작업에서 각각의 기술을 선택한 배경은 다음과 같다.

#### 소스
빌드 이전 단계의 소스코드가 올라가는 레포지토리를 의미한다. 현재 진행중인 프로젝트는 **Github**를 적극 활용하고 있기 때문에 굳이 별도의 소스 레포지토리를 사용할 이유는 없다.


#### 빌드
**Docker**를 사용해 컨테이너 이미지로 빌드하였다. 인터넷 상에서 찾을 수 있는 간단한 튜토리얼에는 S3 등에 소스를 통째로 올린 다음, CodeDeploy를 이용해 배포가 될 VM 내부에서 jar파일을 빌드하여 실행하는 방식이 많았다. 그러나 이 방법은 VM의 컴퓨팅 자원을 사용하기 때문에 자칫하면 배포 환경에 영향을 미칠 수 있어 고려하지 않았다. 또 컨테이너를 사용할 것이기 때문에 굳이 클라우드가 제공하는 별도의 빌드 도구 등을 사용할 필요도 없다. 그냥 Docker로 빌드를 마친 컨테이너 이미지만 깔끔하게 배포하는 쪽을 택하기로 했다.

Docker를 사용하기로 했으니 도커 이미지가 올라갈 저장소(Repository)도 결정해야 한다. 일반적으로 가장 많이 사용하는 것은 **Docker hub**이다. 그 외에 클라우드 환경이라면 각 공급사에서 제공하는 저장소 서비스도 있다. AWS의 경우 **ECR**이 그것이다.

비용과 편의성을 중점으로 두 가지 서비스를 비교하였다. Docker hub의 경우 public repository는 무료이지만 private repository를 사용하고자 한다면 일정 비용을 내야 하고, AWS ECR은 별도의 비용 정책이 있다. 500mb 이미지를 기준으로 비용은 큰 차이가 나지 않았으나, 아무래도 AWS 환경에 배포하는 만큼 **AWS ECR** 쪽이 보안 및 편의상 이점이 많았다(Github에 따로 repository 액세스 관련 정보를 저장하지 않아도 되기 때문). 이 부분은 OIDC 구축 부분에서 후술하기로 한다.


#### 배포
AWS EC2에 배포할 예정이기 때문에 관련하여 다양한 기능을 제공하는 **AWS CodeDeploy**를 사용한다. 단순한 어플리케이션이라면 VM 내부에서 Pull & Run만 하면 배포가 끝나므로 ssh 접속 등으로 해결하는 경우도 있지만, 보안상 좋은 방법은 아닌데다 추후 프로젝트 규모가 커지고 복잡도가 상승할 가능성도 높기 때문에 다양한 옵션과 기능을 제공하는 AWS CodeDeploy를 사용하기로 결정했다.


#### 파이프라인
**Github Actions**를 사용한다. 우선 익히기 쉽다(!). 또 실제 배포 환경에 영향을 미치지 않고 별도의 격리된 환경에서 빌드 및 배포가 가능하다. 한 번 배워두면 다른 배포 환경을 접하더라도 새 도구를 익혀야 하는 부담 없이 그대로 사용할 수 있고, 배포 뿐 아니라 다른 자동화 기능 구현에도 널리 사용되고 있다는 점도 공부하는 입장에서는 큰 장점이다.

---

## 구현 과정
### 1. 프로젝트 및 Dockerfile 생성
우선 배포할 프로젝트와 Dockerfile을 생성한다.

#### HelloWorldController.java
```java
// Annotation은 생략
public class HelloWorldController {

  @GetMapping("v1/hello-world")
  public ResponseEntity<Object> testHelloWorld() {
    return ResponseEntity.of(Optional.of("Hello World"));
  }
}

```

#### Dockerfile
```dockerfile
FROM openjdk:17.0.2-jdk
ARG JAR_FILE_PATH=build/libs/*.jar
ARG ARG_PROFILE=test
ENV PROFILE=${ARG_PROFILE}
COPY $JAR_FILE_PATH app.jar
EXPOSE 8080
ENTRYPOINT ["java", "-jar", "-Dspring.profiles.active=${PROFILE}", "app.jar"]
```
Docker build 시 ARG_PROFILE을 인수로 넘기면 환경을 다르게 해 빌드할 수 있는 도커파일이다.


### 2. ECR 리포지토리 및 S3 버킷 생성

ECR에 프라이빗 리포지토리를 생성한다.

![](../attatchments/img/2024-07-09-cicd-study-with-codedeploy-ecr-create.png)

실제 프로젝트에서는 이미지 태그로 버전 관리 등을 할 예정이므로 태그 변경 불가능 설정을 활성화했다.
필요 없다면 꺼도 무관하다. 스터디용 리포지토리에서도 해당 설정을 꺼 두었다.

다음으로 S3에도 배포 스크립트를 업로드할 버킷을 생성한다.
반드시 **퍼블릭 액세스 차단**을 활성화해 정해진 IAM 사용자만 리소스에 접근할 수 있도록 한다.



### 3. 인스턴스 생성 및 설정

#### 인스턴스 생성
실제 Spring boot가 실행될 인스턴스를 생성한다.

**EC2**뿐 아니라 **Lightsail**에도 Codedeploy 연결이 가능하다. Lightsail은 종량제인 EC2와 달리 정액 요금제이므로, 개발 환경 등에서는 유용하게 사용할 수 있을 것이다. 실제 개발 서버 역시 Lightsail에 배포되고 있다.

주의할 점은, 반드시 인스턴스의 성격을 나타내는 적절한 **태그**를 설정해야 한다는 것이다. CodeDeploy가 배포 대상 머신을 구분하는 기준이 바로 태그이기 때문이다. 이는 이후 CodeDeploy 섹션에서 자세히 후술하겠다.

나는 `axyz-back-dev-instance-1`로 인스턴스 태그를 설정하였다.(EC2)

#### 배포에 필요한 도구 설치

인스턴스를 생성한 후 인스턴스 내부에 필요한 도구를 설치한다. (Docker, Docker Compose, AWS CLI, CodeDeploy agent)
아래에 각각의 설치 안내 링크를 첨부한다. 모두 우분투 기준이다.

> - Docker: [https://docs.docker.com/engine/install/ubuntu/](https://docs.docker.com/engine/install/ubuntu/)
> - Docker Compose: [https://docs.docker.com/compose/install/linux/#install-using-the-repository](https://docs.docker.com/compose/install/linux/#install-using-the-repository)
> - AWS CLI: [https://docs.aws.amazon.com/ko_kr/cli/latest/userguide/getting-started-install.html
](https://docs.aws.amazon.com/ko_kr/cli/latest/userguide/getting-started-install.html)
>   - (AWS CLI는 압축파일 형식으로 다운로드되므로 압축 해제 도구 설치가 선행되어야 한다.)
> - CodeDeploy agent: [https://docs.aws.amazon.com/ko_kr/codedeploy/latest/userguide/codedeploy-agent-operations-install-ubuntu.html
](https://docs.aws.amazon.com/ko_kr/codedeploy/latest/userguide/codedeploy-agent-operations-install-ubuntu.html)


#### IAM 역할 생성

그 다음에는 인스턴스에 **IAM 역할**을 부여한다.
우리는 인스턴스(구체적으로는 EC2 내부에 설치된 CodeDeploy agent)가 직접 ECR 등에 Pull & Run하게 할 것이므로, 인스턴스에게도 서비스 접근 권한이 필요하기 때문이다.

![](../attatchments/img/2024-07-09-cicd-study-with-codedeploy-ec2-role1.png)

엔터티 유형을 **AWS 서비스**로, 사용 사례를 **EC2**로 설정하고 다음을 클릭한다.

![](../attatchments/img/2024-07-09-cicd-study-with-codedeploy-ec2-role2.png)

`AmazonEC2RoleforAWSCodeDeploy` 권한을 연결하고 다음을 클릭한다.
개발자가 식별 가능한 적절한 역할명과 설명을 작성한 다음 역할을 생성한다.

#### IAM 역할 연결

방금 생성한 IAM 역할을 인스턴스에 연결해야 한다.
EC2를 사용하는 경우에는 인스턴스 설정에서 쉽게 역할 연결이 가능하지만, Lightsail의 경우 일종의 온프레미스 인스턴스로 간주하고 별도의 설정을 해야 한다.


### 4. CodeDeploy 설정

#### IAM 역할 생성
CodeDeploy는 CodeDeploy agent를 통해 머신 내부에서 실행된다

#### 애플리케이션 및 배포 그룹 생성

CodeDeploy를 사용하려면 먼저 **애플리케이션**을 생성해야 한다.
애플리케이션이란 CodeDeploy가 배포하고 관리하는 코드베이스의 단위로, 배포하고자 하는 코드베이스와 더불어 배포에 관한 각종 설정, 리소스 등도 포함한다.

![](../attatchments/img/2024-07-09-cicd-study-with-codedeploy-app-create.png)

EC2, Lightsail 모두 컴퓨팅 플랫폼은 **EC2/온프레미스**로 설정한다.

그 다음 **배포 그룹**을 생성한다.
배포 그룹은 애플리케이션이 수행하는 배포 구성의 단위로, 배포 대상이 될 인스턴스, 로드밸런서, 롤백 구성 등을 포함한다.


#### appspec.yml 및 배포 스크립트 작성


### 5. Github Actions 설정

#### Github OIDC 설정
https://velog.io/@jeongmin78/CICD-Github-Action-AWS-IAM-Role-%EC%9D%B4%EC%9A%A9%ED%95%B4-%EC%9D%B4%EB%AF%B8%EC%A7%80%EB%A5%BC-ECR%EC%97%90-%EC%98%AC%EB%A6%AC%EA%B8%B0-8n3fmmgn

#### workflow 파일 작성

https://docs.aws.amazon.com/ko_kr/codepipeline/latest/userguide/tutorials-ecs-ecr-codedeploy.html#tutorials-ecs-ecr-codedeploy-imagerepository

### 6. Github submodule을 이용해 민감정보 관리 (선택사항)


### 참고

Docker hub vs AWS ECR 비교: https://medium.com/day34/container-repository-comparsion-dd4826f6a683
https://blog.naver.com/PostView.naver?blogId=shino1025&logNo=222586028036
https://hoon9901.github.io/aws-codedeploy/
https://scratchpad.blog/howto/how-to-use-codedeploy-with-aws-lightsail/

